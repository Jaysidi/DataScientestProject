import streamlit as st
st.set_page_config(
    page_title="WebScraping de donn√©es compl√©mentaires",
    layout="wide",
    menu_items={}
)

from Libraries.Data import vgsales_cleaned_df, vgsales_original_df, uvl_df, metacritic_scores_df, metacritic_scores_md, \
    metacritic_reviews_md, metacritic_user_reviews_df

st.image("WS.png")

tab1, tab2, tab3 = st.tabs(['Remplacement des NaN', 'Enrichissement', 'Analyse de sentiment'])
with tab1:
    st.title("Remplacement des valeurs manquantes du jeu de donn√©es initial")
    st.markdown(f"""
    Le jeu de donn√©es initial contient 329 valeurs manquantes (NaN).""")
    na_summary = vgsales_original_df.isna().sum()[vgsales_original_df.isna().sum() != 0].reset_index()
    na_summary['%'] = round(na_summary[0] / len(vgsales_cleaned_df) * 100, 2)
    na_summary.columns = ['Variable', '# NaN', '% total']
    st.dataframe(na_summary)
    st.markdown("""Afin de r√©duire au maximum la suppression de ligne, nous avons tent√© de r√©cup√©rer ces informations manquantes en les recherchant par la technique du Web Scraping.  
    Quatre sites diff√©rents ont √©t√© scrapp√©s: 
    
* Le site Universal Videogame List (https://www.uvlist.net/gamesearch/) r√©pertoriant 160,912 r√©f√©rences
* Le site d'origine du jeu de donn√©es VGChartz (https://www.vgchartz.com/gamedb/) r√©pertoriant 65,865 r√©f√©rences
* Le site Metacritic (https://www.metacritic.com/browse/game/) r√©pertoriant 13,503 r√©f√©rences
* Le site Mobigames (https://www.mobygames.com/) r√©pertoriant 289,909 r√©f√©rences""")
    st.markdown("## 1. UVList - https://www.uvlist.net/gamesearch/")
    with st.popover("Aper√ßu du site"):
        st.image("uvlist_game_grid_preview.png")
    st.markdown("""
    Les donn√©es ont √©t√© collect√©es √† l'aide de la librairie *lxml* et par le biais des *XPath* des √©l√©ments du code html.  
    Le scrap a permis ici de r√©cup√©rer le nom des jeux, l'URL du d√©tail des jeux, leurs plateformes, l'ann√©e de sortie 
    ainsi que l'√©diteur des jeux:""")
    st.dataframe(uvl_df.head())
    st.write("## 2. VGChartz - https://www.vgchartz.com/gamedb/")
    with st.popover("Aper√ßu du site"):
        st.image("vgchartz_game_grid_preview.png")
    st.markdown("""
    Les donn√©es ont √©t√© collect√©es √† l'aide de la librairie BeautifulSoup.  
    Afin de voir si nous ouvions avoir des information plus √† jour, notamment concernant les volumes de ventes des jeux,
    nous avons reparcouru l'ensemble des jeux r√©sents sur le site.  
    
    Il s'est av√©r√© que les informations actuellement pr√©sentes sont malheureusement moins compl√®te que lors du scrape 
    de 2016 (source Kaggle).""")

    st.write("## 3. Metacritic - https://www.metacritic.com/browse/game/")
    with st.popover("Aper√ßu du site"):
        st.image("meta_game_grid_preview.png")
    st.markdown("""
        Les donn√©es ont √©t√© collect√©es √† l'aide de la librairie BeautifulSoup.
        
        En plus du nom, ann√©e de sortie, √©diteur, plateforme, le script a permis de collecter le d√©veloppeur, le rating,
        la description du jeu, la note des 'critics', la note utilisateur, ainsi que les nombres d'avis positifs/n√©gatifs/mitig√©s
        par type de votant (critic/user).""")
    st.dataframe(metacritic_scores_df.head())
    with st.expander("Metadata de l'ensemble des donn√©es recueillies", expanded=False, icon='üìù'):
        st.markdown(metacritic_scores_md)

    st.write("## 4. MobyGames - https://www.mobygames.com/")
    with st.popover("Aper√ßu du site"):
        st.image("mobigames_game_grid_preview.png")
    st.markdown("""
        Les donn√©es ont √©t√© collect√©es √† l'aide de la librairie BeautifulSoup.  
        
        Pour chaque valeur manquante list√©e, la fonction effectuait une recherche sur le site pour le jeu concern√©, 
        et tentait ensuite de trouver l'information manquante.""")

with tab2:
    st.title("Enrichissement du jeu de donn√©es par WebScraping")
    st.markdown(f"""
    Les donn√©es provenant du site Kaggle (Recueillies sur le site VGChartz.com) ne contiennent que des variables 
    cat√©gorielles et, dans le cadre de notre projet, les seules variables quantitatives sont les variables cibles 
    (*Nombre de jeux vendus par r√©gion*, en million):""")
    with st.popover("Aper√ßu du site"):
        st.image("vgchartz_game_grid_preview.png")
    st.dataframe(vgsales_cleaned_df.head(5))
    st.markdown(f"""Dans le but d'enrichir notre jeu de donn√©es et permettre d'entrainer plus finement nos mod√®les, 
    nous avons fusionn√© les donn√©es de base (Kaggle) et celles r√©cup√©r√©es par sur le site Metacritic.  
    Les informations compl√©mentaires recueillies sont, pour chacun des couple jeu/plateforme:""")
    with st.popover("Aper√ßu du site"):
        st.image("meta_score_details_preview.png")
    st.markdown(f"""
* Le d√©veloppeur 
* La date compl√®te de sortie
* Le 'Rating' repr√©sentant le type de publique concern√© par le jeu (https://en.wikipedia.org/wiki/Entertainment_Software_Rating_Board#Ratings)
* La description du jeux
* La note moyenne des **Critiques** (note sur 100) - https://www.metacritic.com/about-us/
* Le nombre de votes '*Positifs*' par les Critiques
* Le nombre de votes '*Mitig√©s*' par les Critiques
* Le nombre de votes '*N√©gatifs*' par les Critiques
* La note moyenne des **Utilisateurs** (note sur 10)
* Le nombre de votes '*Positifs*' par les Utilisateurs
* Le nombre de votes '*Mitig√©s*' par les Utilisateurs
* Le nombre de votes '*N√©gatifs*' par les Utilisateurs
* L'URL de la fiche du jeu
""")
    st.dataframe(metacritic_scores_df.head())
    with st.expander("Metadata de l'ensemble des donn√©es recueillies", expanded=False, icon='üìù'):
        st.markdown(metacritic_scores_md)

    st.markdown("""Nous avons √©galement r√©cup√©r√© le nombre de vue de vid√©o 'trailer' sur Youtube √† l'aide de 
    la librairie Python Selenium""")

with tab3:
    st.title("R√©cup√©ration des commentaires des utilisateurs laiss√©s sur le site Metacritic")
    st.markdown(f"""Dans le but de faire une analyse de sentiment, nous avons recueilli les plus vieux commentaires
des jeux ayant un minimum de 50 commentaires, en nous limitant √† 500 commentaires maximum.  
La librairie BeautifulSoup a √©t√© utilis√©e pour analyser les donn√©es recueillies au format JSON via l'API du site, 
sans laquelle l'op√©ration aurait √©t√© impossible dans des d√©lais raisonnable (page dynamique). """)
    with st.popover("Aper√ßu du site"):
        st.image("meta_user_review_preview.png")
    st.markdown(f"""
Nous avons recueilli les informations suivantes:  
* Le nom du jeu
* La plateforme du jeu
* Le nombres **total** d'avis pr√©sents sur le site
* Le nombre d'avis **recueillis**
* L'avis
* La note attribu√©e par l'utilisateur ayant laiss√© l'avis (Note sur 10)
* La date du d√©pot de l'avis sur le site
* Le pseudo de l'auteur de l'avis
* Un flag si l'avis est jug√© √™tre un "spoiler"
""")
    st.write("#### Aper√ßu des donn√©es")
    st.caption("Le fichier csv g√©n√©r√© faisant 381 Mo, seul un √©chantillon de 1000 lignes prises al√©atoirement ont √©t√© charg√©es")
    st.dataframe(metacritic_user_reviews_df.head())
    with st.expander("Metadata de l'ensemble des donn√©es recueillies", expanded=False, icon='üìù'):
        st.markdown(metacritic_reviews_md)